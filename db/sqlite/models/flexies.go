// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Flexy is an object representing the database table.
type Flexy struct {
	ID        null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Value     string     `boil:"value" json:"value" toml:"value" yaml:"value"`
	Normal    string     `boil:"normal" json:"normal" toml:"normal" yaml:"normal"`
	Pos       string     `boil:"pos" json:"pos" toml:"pos" yaml:"pos"`
	GPosition null.Int64 `boil:"gPosition" json:"gPosition,omitempty" toml:"gPosition" yaml:"gPosition,omitempty"`

	R *flexyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L flexyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FlexyColumns = struct {
	ID        string
	Value     string
	Normal    string
	Pos       string
	GPosition string
}{
	ID:        "id",
	Value:     "value",
	Normal:    "normal",
	Pos:       "pos",
	GPosition: "gPosition",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var FlexyWhere = struct {
	ID        whereHelpernull_Int64
	Value     whereHelperstring
	Normal    whereHelperstring
	Pos       whereHelperstring
	GPosition whereHelpernull_Int64
}{
	ID:        whereHelpernull_Int64{field: "\"flexies\".\"id\""},
	Value:     whereHelperstring{field: "\"flexies\".\"value\""},
	Normal:    whereHelperstring{field: "\"flexies\".\"normal\""},
	Pos:       whereHelperstring{field: "\"flexies\".\"pos\""},
	GPosition: whereHelpernull_Int64{field: "\"flexies\".\"gPosition\""},
}

// FlexyRels is where relationship names are stored.
var FlexyRels = struct {
	GPositionGrammarPosition string
}{
	GPositionGrammarPosition: "GPositionGrammarPosition",
}

// flexyR is where relationships are stored.
type flexyR struct {
	GPositionGrammarPosition *GrammarPosition `boil:"GPositionGrammarPosition" json:"GPositionGrammarPosition" toml:"GPositionGrammarPosition" yaml:"GPositionGrammarPosition"`
}

// NewStruct creates a new relationship struct
func (*flexyR) NewStruct() *flexyR {
	return &flexyR{}
}

// flexyL is where Load methods for each relationship are stored.
type flexyL struct{}

var (
	flexyAllColumns            = []string{"id", "value", "normal", "pos", "gPosition"}
	flexyColumnsWithoutDefault = []string{"id", "value", "normal", "pos", "gPosition"}
	flexyColumnsWithDefault    = []string{}
	flexyPrimaryKeyColumns     = []string{"id"}
)

type (
	// FlexySlice is an alias for a slice of pointers to Flexy.
	// This should generally be used opposed to []Flexy.
	FlexySlice []*Flexy

	flexyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	flexyType                 = reflect.TypeOf(&Flexy{})
	flexyMapping              = queries.MakeStructMapping(flexyType)
	flexyPrimaryKeyMapping, _ = queries.BindMapping(flexyType, flexyMapping, flexyPrimaryKeyColumns)
	flexyInsertCacheMut       sync.RWMutex
	flexyInsertCache          = make(map[string]insertCache)
	flexyUpdateCacheMut       sync.RWMutex
	flexyUpdateCache          = make(map[string]updateCache)
	flexyUpsertCacheMut       sync.RWMutex
	flexyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single flexy record from the query.
func (q flexyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Flexy, error) {
	o := &Flexy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for flexies")
	}

	return o, nil
}

// All returns all Flexy records from the query.
func (q flexyQuery) All(ctx context.Context, exec boil.ContextExecutor) (FlexySlice, error) {
	var o []*Flexy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Flexy slice")
	}

	return o, nil
}

// Count returns the count of all Flexy records in the query.
func (q flexyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count flexies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q flexyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if flexies exists")
	}

	return count > 0, nil
}

// GPositionGrammarPosition pointed to by the foreign key.
func (o *Flexy) GPositionGrammarPosition(mods ...qm.QueryMod) grammarPositionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GPosition),
	}

	queryMods = append(queryMods, mods...)

	query := GrammarPositions(queryMods...)
	queries.SetFrom(query.Query, "\"grammar_positions\"")

	return query
}

// LoadGPositionGrammarPosition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flexyL) LoadGPositionGrammarPosition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFlexy interface{}, mods queries.Applicator) error {
	var slice []*Flexy
	var object *Flexy

	if singular {
		object = maybeFlexy.(*Flexy)
	} else {
		slice = *maybeFlexy.(*[]*Flexy)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &flexyR{}
		}
		if !queries.IsNil(object.GPosition) {
			args = append(args, object.GPosition)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flexyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GPosition) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GPosition) {
				args = append(args, obj.GPosition)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`grammar_positions`),
		qm.WhereIn(`grammar_positions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GrammarPosition")
	}

	var resultSlice []*GrammarPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GrammarPosition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for grammar_positions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for grammar_positions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GPositionGrammarPosition = foreign
		if foreign.R == nil {
			foreign.R = &grammarPositionR{}
		}
		foreign.R.GPositionFlexies = append(foreign.R.GPositionFlexies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GPosition, foreign.ID) {
				local.R.GPositionGrammarPosition = foreign
				if foreign.R == nil {
					foreign.R = &grammarPositionR{}
				}
				foreign.R.GPositionFlexies = append(foreign.R.GPositionFlexies, local)
				break
			}
		}
	}

	return nil
}

// SetGPositionGrammarPosition of the flexy to the related item.
// Sets o.R.GPositionGrammarPosition to related.
// Adds o to related.R.GPositionFlexies.
func (o *Flexy) SetGPositionGrammarPosition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GrammarPosition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"flexies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"gPosition"}),
		strmangle.WhereClause("\"", "\"", 0, flexyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GPosition, related.ID)
	if o.R == nil {
		o.R = &flexyR{
			GPositionGrammarPosition: related,
		}
	} else {
		o.R.GPositionGrammarPosition = related
	}

	if related.R == nil {
		related.R = &grammarPositionR{
			GPositionFlexies: FlexySlice{o},
		}
	} else {
		related.R.GPositionFlexies = append(related.R.GPositionFlexies, o)
	}

	return nil
}

// RemoveGPositionGrammarPosition relationship.
// Sets o.R.GPositionGrammarPosition to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Flexy) RemoveGPositionGrammarPosition(ctx context.Context, exec boil.ContextExecutor, related *GrammarPosition) error {
	var err error

	queries.SetScanner(&o.GPosition, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("gPosition")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.GPositionGrammarPosition = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GPositionFlexies {
		if queries.Equal(o.GPosition, ri.GPosition) {
			continue
		}

		ln := len(related.R.GPositionFlexies)
		if ln > 1 && i < ln-1 {
			related.R.GPositionFlexies[i] = related.R.GPositionFlexies[ln-1]
		}
		related.R.GPositionFlexies = related.R.GPositionFlexies[:ln-1]
		break
	}
	return nil
}

// Flexies retrieves all the records using an executor.
func Flexies(mods ...qm.QueryMod) flexyQuery {
	mods = append(mods, qm.From("\"flexies\""))
	return flexyQuery{NewQuery(mods...)}
}

// FindFlexy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFlexy(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*Flexy, error) {
	flexyObj := &Flexy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"flexies\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, flexyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from flexies")
	}

	return flexyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Flexy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flexies provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(flexyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	flexyInsertCacheMut.RLock()
	cache, cached := flexyInsertCache[key]
	flexyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			flexyAllColumns,
			flexyColumnsWithDefault,
			flexyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(flexyType, flexyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(flexyType, flexyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"flexies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"flexies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"flexies\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, flexyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into flexies")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for flexies")
	}

CacheNoHooks:
	if !cached {
		flexyInsertCacheMut.Lock()
		flexyInsertCache[key] = cache
		flexyInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Flexy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Flexy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	flexyUpdateCacheMut.RLock()
	cache, cached := flexyUpdateCache[key]
	flexyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			flexyAllColumns,
			flexyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update flexies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"flexies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, flexyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(flexyType, flexyMapping, append(wl, flexyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update flexies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for flexies")
	}

	if !cached {
		flexyUpdateCacheMut.Lock()
		flexyUpdateCache[key] = cache
		flexyUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q flexyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for flexies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for flexies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FlexySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flexyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"flexies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flexyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in flexy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all flexy")
	}
	return rowsAff, nil
}

// Delete deletes a single Flexy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Flexy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Flexy provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), flexyPrimaryKeyMapping)
	sql := "DELETE FROM \"flexies\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from flexies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for flexies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q flexyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no flexyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flexies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flexies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FlexySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flexyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"flexies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flexyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flexy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flexies")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Flexy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFlexy(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlexySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FlexySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flexyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"flexies\".* FROM \"flexies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flexyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FlexySlice")
	}

	*o = slice

	return nil
}

// FlexyExists checks if the Flexy row exists.
func FlexyExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"flexies\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if flexies exists")
	}

	return exists, nil
}
