// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Lemma is an object representing the database table.
type Lemma struct {
	ID           null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Value        string     `boil:"value" json:"value" toml:"value" yaml:"value"`
	Pos          string     `boil:"pos" json:"pos" toml:"pos" yaml:"pos"`
	ChangeSchema null.Int64 `boil:"changeSchema" json:"changeSchema,omitempty" toml:"changeSchema" yaml:"changeSchema,omitempty"`

	R *lemmaR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lemmaL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LemmaColumns = struct {
	ID           string
	Value        string
	Pos          string
	ChangeSchema string
}{
	ID:           "id",
	Value:        "value",
	Pos:          "pos",
	ChangeSchema: "changeSchema",
}

// Generated where

var LemmaWhere = struct {
	ID           whereHelpernull_Int64
	Value        whereHelperstring
	Pos          whereHelperstring
	ChangeSchema whereHelpernull_Int64
}{
	ID:           whereHelpernull_Int64{field: "\"lemmas\".\"id\""},
	Value:        whereHelperstring{field: "\"lemmas\".\"value\""},
	Pos:          whereHelperstring{field: "\"lemmas\".\"pos\""},
	ChangeSchema: whereHelpernull_Int64{field: "\"lemmas\".\"changeSchema\""},
}

// LemmaRels is where relationship names are stored.
var LemmaRels = struct {
	LemmaIdFlexies string
}{
	LemmaIdFlexies: "LemmaIdFlexies",
}

// lemmaR is where relationships are stored.
type lemmaR struct {
	LemmaIdFlexies FlexySlice `boil:"LemmaIdFlexies" json:"LemmaIdFlexies" toml:"LemmaIdFlexies" yaml:"LemmaIdFlexies"`
}

// NewStruct creates a new relationship struct
func (*lemmaR) NewStruct() *lemmaR {
	return &lemmaR{}
}

// lemmaL is where Load methods for each relationship are stored.
type lemmaL struct{}

var (
	lemmaAllColumns            = []string{"id", "value", "pos", "changeSchema"}
	lemmaColumnsWithoutDefault = []string{"id", "value", "pos", "changeSchema"}
	lemmaColumnsWithDefault    = []string{}
	lemmaPrimaryKeyColumns     = []string{"id"}
)

type (
	// LemmaSlice is an alias for a slice of pointers to Lemma.
	// This should generally be used opposed to []Lemma.
	LemmaSlice []*Lemma

	lemmaQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lemmaType                 = reflect.TypeOf(&Lemma{})
	lemmaMapping              = queries.MakeStructMapping(lemmaType)
	lemmaPrimaryKeyMapping, _ = queries.BindMapping(lemmaType, lemmaMapping, lemmaPrimaryKeyColumns)
	lemmaInsertCacheMut       sync.RWMutex
	lemmaInsertCache          = make(map[string]insertCache)
	lemmaUpdateCacheMut       sync.RWMutex
	lemmaUpdateCache          = make(map[string]updateCache)
	lemmaUpsertCacheMut       sync.RWMutex
	lemmaUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single lemma record from the query.
func (q lemmaQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Lemma, error) {
	o := &Lemma{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for lemmas")
	}

	return o, nil
}

// All returns all Lemma records from the query.
func (q lemmaQuery) All(ctx context.Context, exec boil.ContextExecutor) (LemmaSlice, error) {
	var o []*Lemma

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Lemma slice")
	}

	return o, nil
}

// Count returns the count of all Lemma records in the query.
func (q lemmaQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count lemmas rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lemmaQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if lemmas exists")
	}

	return count > 0, nil
}

// LemmaIdFlexies retrieves all the flexy's Flexies with an executor via lemmaId column.
func (o *Lemma) LemmaIdFlexies(mods ...qm.QueryMod) flexyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"flexies\".\"lemmaId\"=?", o.ID),
	)

	query := Flexies(queryMods...)
	queries.SetFrom(query.Query, "\"flexies\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"flexies\".*"})
	}

	return query
}

// LoadLemmaIdFlexies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (lemmaL) LoadLemmaIdFlexies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLemma interface{}, mods queries.Applicator) error {
	var slice []*Lemma
	var object *Lemma

	if singular {
		object = maybeLemma.(*Lemma)
	} else {
		slice = *maybeLemma.(*[]*Lemma)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lemmaR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lemmaR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`flexies`),
		qm.WhereIn(`flexies.lemmaId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load flexies")
	}

	var resultSlice []*Flexy
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice flexies")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on flexies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for flexies")
	}

	if singular {
		object.R.LemmaIdFlexies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &flexyR{}
			}
			foreign.R.LemmaIdLemmas = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.LemmaId) {
				local.R.LemmaIdFlexies = append(local.R.LemmaIdFlexies, foreign)
				if foreign.R == nil {
					foreign.R = &flexyR{}
				}
				foreign.R.LemmaIdLemmas = local
				break
			}
		}
	}

	return nil
}

// AddLemmaIdFlexies adds the given related objects to the existing relationships
// of the lemmas, optionally inserting them as new records.
// Appends related to o.R.LemmaIdFlexies.
// Sets related.R.LemmaIdLemmas appropriately.
func (o *Lemma) AddLemmaIdFlexies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Flexy) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.LemmaId, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"flexies\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"lemmaId"}),
				strmangle.WhereClause("\"", "\"", 0, flexyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.LemmaId, o.ID)
		}
	}

	if o.R == nil {
		o.R = &lemmaR{
			LemmaIdFlexies: related,
		}
	} else {
		o.R.LemmaIdFlexies = append(o.R.LemmaIdFlexies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &flexyR{
				LemmaIdLemmas: o,
			}
		} else {
			rel.R.LemmaIdLemmas = o
		}
	}
	return nil
}

// SetLemmaIdFlexies removes all previously related items of the
// lemmas replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LemmaIdLemmas's LemmaIdFlexies accordingly.
// Replaces o.R.LemmaIdFlexies with related.
// Sets related.R.LemmaIdLemmas's LemmaIdFlexies accordingly.
func (o *Lemma) SetLemmaIdFlexies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Flexy) error {
	query := "update \"flexies\" set \"lemmaId\" = null where \"lemmaId\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.LemmaIdFlexies {
			queries.SetScanner(&rel.LemmaId, nil)
			if rel.R == nil {
				continue
			}

			rel.R.LemmaIdLemmas = nil
		}

		o.R.LemmaIdFlexies = nil
	}
	return o.AddLemmaIdFlexies(ctx, exec, insert, related...)
}

// RemoveLemmaIdFlexies relationships from objects passed in.
// Removes related items from R.LemmaIdFlexies (uses pointer comparison, removal does not keep order)
// Sets related.R.LemmaIdLemmas.
func (o *Lemma) RemoveLemmaIdFlexies(ctx context.Context, exec boil.ContextExecutor, related ...*Flexy) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.LemmaId, nil)
		if rel.R != nil {
			rel.R.LemmaIdLemmas = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("lemmaId")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LemmaIdFlexies {
			if rel != ri {
				continue
			}

			ln := len(o.R.LemmaIdFlexies)
			if ln > 1 && i < ln-1 {
				o.R.LemmaIdFlexies[i] = o.R.LemmaIdFlexies[ln-1]
			}
			o.R.LemmaIdFlexies = o.R.LemmaIdFlexies[:ln-1]
			break
		}
	}

	return nil
}

// Lemmas retrieves all the records using an executor.
func Lemmas(mods ...qm.QueryMod) lemmaQuery {
	mods = append(mods, qm.From("\"lemmas\""))
	return lemmaQuery{NewQuery(mods...)}
}

// FindLemma retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLemma(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*Lemma, error) {
	lemmaObj := &Lemma{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lemmas\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lemmaObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from lemmas")
	}

	return lemmaObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Lemma) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no lemmas provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(lemmaColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lemmaInsertCacheMut.RLock()
	cache, cached := lemmaInsertCache[key]
	lemmaInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lemmaAllColumns,
			lemmaColumnsWithDefault,
			lemmaColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lemmaType, lemmaMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lemmaType, lemmaMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lemmas\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lemmas\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"lemmas\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, lemmaPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into lemmas")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for lemmas")
	}

CacheNoHooks:
	if !cached {
		lemmaInsertCacheMut.Lock()
		lemmaInsertCache[key] = cache
		lemmaInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Lemma.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Lemma) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	lemmaUpdateCacheMut.RLock()
	cache, cached := lemmaUpdateCache[key]
	lemmaUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lemmaAllColumns,
			lemmaPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update lemmas, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lemmas\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, lemmaPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lemmaType, lemmaMapping, append(wl, lemmaPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update lemmas row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for lemmas")
	}

	if !cached {
		lemmaUpdateCacheMut.Lock()
		lemmaUpdateCache[key] = cache
		lemmaUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q lemmaQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for lemmas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for lemmas")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LemmaSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lemmaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lemmas\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lemmaPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in lemma slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all lemma")
	}
	return rowsAff, nil
}

// Delete deletes a single Lemma record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Lemma) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Lemma provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lemmaPrimaryKeyMapping)
	sql := "DELETE FROM \"lemmas\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from lemmas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for lemmas")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lemmaQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no lemmaQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lemmas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lemmas")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LemmaSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lemmaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"lemmas\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lemmaPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lemma slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lemmas")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Lemma) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLemma(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LemmaSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LemmaSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lemmaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lemmas\".* FROM \"lemmas\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lemmaPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LemmaSlice")
	}

	*o = slice

	return nil
}

// LemmaExists checks if the Lemma row exists.
func LemmaExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lemmas\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if lemmas exists")
	}

	return exists, nil
}
