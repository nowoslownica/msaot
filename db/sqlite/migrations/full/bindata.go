// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package full generated by go-bindata.// sources:
// 000001_msaot.down.sql
// 000001_msaot.up.sql
// 000002_msaot.down.sql
// 000002_msaot.up.sql
package full

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_msaotDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\xc8\x49\xcd\xcd\x4d\x2c\xb6\xe6\x42\x12\x4a\x2f\x4a\xcc\xcd\x4d\x2c\x8a\x2f\xc8\x2f\xce\x2c\xc9\xcc\xcf\x43\x95\x4d\xcb\x49\xad\xc8\x4c\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\xf9\x41\x2d\xda\x45\x00\x00\x00")

func _000001_msaotDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_msaotDownSql,
		"000001_msaot.down.sql",
	)
}

func _000001_msaotDownSql() (*asset, error) {
	bytes, err := _000001_msaotDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_msaot.down.sql", size: 69, mode: os.FileMode(436), modTime: time.Unix(1607365221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_msaotUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\xcf\x8e\xdb\x2c\x14\xc5\xf7\x79\x8a\xb3\x9c\x48\xa0\xcf\xc6\xf9\xeb\x59\x7e\x8b\xaa\x9b\x6a\xa4\x76\x5f\x31\xf6\x4d\x86\xa9\x0d\x16\xe0\x68\xe6\xed\x2b\x9c\x34\xc1\x4a\x5a\xd9\x6c\x92\xe8\x5a\xbf\xe3\x73\x39\x17\x48\x65\x49\x7a\x82\x97\xaf\x0d\xe1\x68\x65\xdb\x4a\xfb\xb3\x33\x4e\x79\x65\xb4\xc3\xd3\x02\x50\x35\x94\xf6\xe8\xac\x6a\xa5\xfd\xc4\x2f\xfa\x64\x0b\xe0\xf8\xbf\x74\x14\x1e\x30\x70\x8e\xbc\x84\x36\x2d\x83\x28\x71\x24\xcd\x50\x94\x90\x55\xc5\xb0\x2a\x51\x4b\xcf\xb0\x2e\xa1\xb4\xf3\x96\x61\x53\xa2\x31\x15\xc3\xb6\xc4\x29\x7c\xef\x4a\x74\xd2\x7a\x86\x7d\x89\xce\x52\x17\xa4\x5f\xc8\x3a\xa3\x6f\xe2\x5c\xf0\x22\xd4\xbf\xf5\xed\x2b\xd9\xfb\xfa\x0f\xd2\xb1\x17\x2e\x06\x29\x47\xa1\x50\xf0\x4d\x78\x83\xf3\x0c\x5b\xbe\x2b\x71\xe8\x7d\x6f\x29\x50\x5f\x48\xd7\x67\xb5\x4b\x07\x67\xff\x87\xc1\xbd\x5e\x2c\x9f\x17\x8b\xd1\xea\x34\xd4\xb6\xf2\x5f\x4b\x72\x92\x4d\x4f\xf0\xf4\xe1\xa1\x8d\x87\xee\x9b\x26\x94\x3b\xe3\xee\x8b\xd5\x9b\xd4\x47\xfa\x5e\xbd\x51\x2b\xaf\x16\x78\x9e\x85\x75\xec\x35\x43\x9e\x73\x91\x95\x38\x91\x7d\x65\x10\x39\x2f\xb2\xd0\x93\x09\x0f\xef\x9d\x1d\x1a\xfa\x50\x94\x60\x6d\x68\xe9\xeb\x99\xb0\x74\x20\x4b\xba\x22\x77\xed\x54\xd5\x4b\x18\x8d\x9a\x1a\xf2\x04\x4b\xce\x5b\x55\xf9\x21\xfd\x97\xcb\x88\xdc\xc3\x0f\x86\xe8\xb1\xce\xd0\x87\xd2\x8e\xac\x0f\x1a\xe6\x01\x39\xd8\x76\x4f\x19\x3b\x3b\xfe\xcb\x67\xd0\xe1\x1c\x35\x55\x0d\x69\xa7\x8c\x1e\xd6\xf0\x3f\x59\xbf\x53\xe5\xd5\x89\xa6\xbd\x24\x67\xc8\xff\xa8\x5e\x7f\x88\xe5\xf3\x34\x5a\x30\x88\x74\xba\x60\x28\xd2\xe9\x15\xc3\x2a\x9d\x5e\x33\xac\xd3\xe9\x0d\xc3\x26\x9d\xde\x32\x6c\xd3\xe9\x5d\x04\x15\xb3\xe9\x7d\x94\xd8\x7c\x3a\xcf\x22\x2a\x01\xcf\xa3\xcc\x12\x70\x11\x85\x96\x80\x17\x51\x6a\x09\xf8\x2a\x8a\x6d\x84\x87\x6d\x58\x19\xfd\xde\x1f\x65\x20\x86\xe3\x2b\xd4\x2e\xa7\xf1\x44\xf9\x78\x1c\x6f\xbb\x72\xb2\xbb\x6b\x67\x22\x09\x8f\x3b\x4b\xc0\x77\x91\xf9\x62\x3e\xbe\x8f\xcc\xcf\xc7\x45\x16\x99\x1f\xe1\x9c\x43\x1a\xab\xdc\xc4\x0c\x44\x3e\xce\xa0\x98\xe9\x43\x8c\x33\x98\x8b\x17\xe3\x0c\xe6\xe2\xab\x71\x06\x73\xf1\xf5\x38\x83\xb9\xf8\x66\x9c\xc1\x0d\x1f\xb6\x47\xf8\xb3\xa3\x2a\xd5\x35\x13\xaf\x25\xb1\x1d\x5f\x78\x97\xb1\x9a\xec\x66\xf7\x08\x9f\x7e\xad\xed\x1f\xe1\xc5\xf2\x79\xf1\x3b\x00\x00\xff\xff\x8d\xdc\x52\xce\x39\x0a\x00\x00")

func _000001_msaotUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_msaotUpSql,
		"000001_msaot.up.sql",
	)
}

func _000001_msaotUpSql() (*asset, error) {
	bytes, err := _000001_msaotUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_msaot.up.sql", size: 2617, mode: os.FileMode(436), modTime: time.Unix(1607769513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_msaotDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x29\x2a\xcd\x4b\x4e\x2c\x49\x55\x28\x49\x4c\xca\x49\x55\x48\xcb\x49\xad\xc8\x4c\x2d\xb6\xe6\x42\x13\xcf\x49\xcd\xcd\x4d\x2c\xb6\xe6\x02\x04\x00\x00\xff\xff\xa9\x3d\x14\x5e\x2f\x00\x00\x00")

func _000002_msaotDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_msaotDownSql,
		"000002_msaot.down.sql",
	)
}

func _000002_msaotDownSql() (*asset, error) {
	bytes, err := _000002_msaotDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_msaot.down.sql", size: 47, mode: os.FileMode(436), modTime: time.Unix(1609495545, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_msaotUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd4\xcd\x6e\xd3\x40\x10\x07\xf0\x3b\x4f\xb1\x37\x83\xb4\x87\xcc\xda\x8e\x6d\xf1\x34\x11\x18\x29\xc8\x4d\xab\x26\xad\x38\x36\xa9\x2a\x90\x82\x54\xf1\x26\x06\x1a\x11\xda\xca\xbc\xc2\xcc\x1b\xa1\x59\x3b\xfe\xd8\x6d\x67\x0f\xbe\xcd\x4f\xbb\x9e\x99\xfd\x2f\x57\xeb\xf2\x72\xa3\x96\xab\xcd\xb9\xaa\xca\xb3\xb3\xc5\x5a\x5d\x2f\xaa\xab\x72\xfd\x16\xb4\x8a\xf0\x19\x6b\xfe\x22\xad\xa2\x55\xa4\x15\xbc\x7b\xff\xe6\x75\x61\xb4\x8a\xe8\x9e\x6b\x2f\x2e\xcf\xb9\xdc\xc8\xf5\x31\x9f\x70\xc4\x07\xda\xe1\x91\xd5\x35\x9f\x20\x93\x84\xc9\x6f\xba\xc5\x27\xba\xa7\x1d\x7d\xef\x99\x11\x59\xca\xec\x1f\x36\xed\xdd\xca\x8b\x48\xab\xd5\x55\x55\x89\x66\xce\xe6\x91\x6e\xb0\xa6\x2d\x1e\xf1\x17\xed\xf1\x2f\xfb\xc5\xc7\xcf\x91\x56\xa9\x68\x33\x7b\x4d\x6c\xe8\x06\x1b\x7c\x38\x75\x4f\x36\x39\x9b\x9f\xb4\x1f\xff\x96\x99\x89\xa4\xe0\x86\x6f\xf1\x11\x6b\xfc\x83\xf5\xa4\x1f\x72\x1b\x61\xc6\xf2\x0e\x1b\xda\xe1\x61\xe2\x62\xd9\xf1\x52\xd0\x57\xda\x9d\x5a\xd9\x8e\x59\xfe\x31\x30\x93\x6b\xe2\x93\xa5\x9b\x0f\x3c\x05\xf9\xff\x20\x1e\x5d\xd3\x73\x13\xf8\xa9\x2a\xbf\x2c\xcb\xd7\x96\x17\xfc\xd5\x75\x80\xe9\x01\xed\x5b\xe0\x6e\x94\x03\xe2\x01\xdc\xb6\xc0\x6d\x9d\x03\x92\xe1\x4a\x87\x16\x24\x32\x48\x07\xd0\xd8\xd5\x03\x7f\x85\x1c\x32\xf7\xce\x98\xcb\x20\x1b\x9d\xd1\x82\x4c\x06\xb9\xd7\xa7\x5c\x06\x45\x0f\xda\xf2\x42\x2e\xb7\x9b\x39\xae\x07\x77\x45\x5c\x30\x1e\x75\x8f\x02\xd3\x06\x33\x41\x36\x7e\xe0\x85\x14\x71\x59\x3c\x62\x74\xd7\xa1\xc0\xdc\x21\xf1\x5a\x06\x49\x68\x7d\xd3\x53\x94\x9a\xe0\xe6\x82\x1d\xfa\x81\xb6\xf8\x6c\xdf\x71\xae\x15\x04\xd6\x04\xb2\x2e\x0f\xe9\x1b\xfd\xb0\xef\x2a\xd6\xca\x04\x26\x0f\xb9\x9f\xbd\x89\xff\x82\x5d\x55\x0c\xd1\x9b\x06\xab\xcd\xcc\x09\x5d\x6c\xba\xf7\x35\x0f\x3e\x17\x03\x93\xd0\xb5\x2a\x0b\xab\x17\xc2\xa9\x08\x37\xc3\x78\xc9\xc4\x8b\x1b\x54\xc9\x38\x3e\xa1\x4b\xa5\xff\x01\x00\x00\xff\xff\x08\x4c\x94\xab\x83\x07\x00\x00")

func _000002_msaotUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_msaotUpSql,
		"000002_msaot.up.sql",
	)
}

func _000002_msaotUpSql() (*asset, error) {
	bytes, err := _000002_msaotUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_msaot.up.sql", size: 1923, mode: os.FileMode(436), modTime: time.Unix(1609495593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_msaot.down.sql": _000001_msaotDownSql,
	"000001_msaot.up.sql":   _000001_msaotUpSql,
	"000002_msaot.down.sql": _000002_msaotDownSql,
	"000002_msaot.up.sql":   _000002_msaotUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_msaot.down.sql": &bintree{_000001_msaotDownSql, map[string]*bintree{}},
	"000001_msaot.up.sql":   &bintree{_000001_msaotUpSql, map[string]*bintree{}},
	"000002_msaot.down.sql": &bintree{_000002_msaotDownSql, map[string]*bintree{}},
	"000002_msaot.up.sql":   &bintree{_000002_msaotUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
