// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package msaot generated by go-bindata.// sources:
// 000001_msaot_down.sql
// 000001_msaot_up.sql
package msaot

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_msaot_downSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\xc8\x49\xcd\xcd\x4d\x2c\xb6\xe6\x42\x12\x4a\x2f\x4a\xcc\xcd\x4d\x2c\x8a\x2f\xc8\x2f\xce\x2c\xc9\xcc\xcf\x2b\xb6\x06\x04\x00\x00\xff\xff\x7d\x5e\x5e\xcd\x30\x00\x00\x00")

func _000001_msaot_downSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_msaot_downSql,
		"000001_msaot_down.sql",
	)
}

func _000001_msaot_downSql() (*asset, error) {
	bytes, err := _000001_msaot_downSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_msaot_down.sql", size: 48, mode: os.FileMode(436), modTime: time.Unix(1603539828, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_msaot_upSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\xbf\x6e\xdb\x30\x10\xc6\x77\x3d\xc5\x6d\x8e\x00\x06\x30\x65\xcb\x7f\x90\xa9\xed\xd0\xad\xc8\xd0\xbd\x60\xa4\x8b\xc0\x96\x22\x0d\x92\x2a\x9a\xb9\xe8\xd4\x97\xc9\xd2\xa1\x40\xd1\x67\x50\xde\xa8\x90\x9b\xda\xb4\x41\x57\x87\x50\x83\x00\x92\xa7\xef\xc7\x13\xef\xc4\xaf\xb2\x28\x3c\x82\x17\x77\x0a\xa1\xb1\xa2\x6d\x85\xfd\xb0\x33\x4e\x7a\x69\xb4\x83\xab\x0c\x40\xd6\x20\xb5\x87\x9d\x95\xad\xb0\x0f\xf0\x09\x1f\x58\x06\xd0\xbc\x11\x0e\x87\xc0\x7e\x72\x8b\xd6\x19\x7d\x98\xbe\xeb\xda\x3b\xb4\x87\xe9\x7b\xd4\xc1\xbb\x6f\x51\xd7\xc7\x60\x8d\x95\x42\xed\xe4\x51\x5d\x19\xfd\xb1\x6b\x84\x3f\x2c\xe5\x59\x76\x92\xe6\xbd\xc2\x2f\x12\xff\x97\xdc\x67\xa1\x3a\x04\xe7\xad\xd4\x0d\x68\xe3\x41\x77\x4a\x0d\x01\x6d\x6c\x2b\x54\x2c\xb2\x33\x2e\xb6\xdc\xdc\x3e\x9f\xc5\x7e\x1b\x8b\xf7\x68\x51\x57\xe8\x62\x67\x25\xeb\x1c\x8c\x86\x1a\x15\x7a\x04\x8b\x03\xae\xf2\x59\x7e\x93\x65\xd7\xd7\xe1\x87\xf2\x57\x99\xd4\x0e\xad\x1f\xa0\x26\x82\xda\xe7\xef\xae\x38\x03\xce\xfe\xa6\x72\x32\x78\x1e\xe7\x37\x34\x4c\xc1\xa0\x98\x00\xb3\x60\xb0\x98\x00\xb3\x64\xb0\x9c\x00\x53\x32\x28\x27\xc0\xac\x18\xac\x26\xc0\xac\x19\xac\x27\xc0\x6c\x02\x75\xf1\x72\xcc\x36\x50\x27\x60\xf8\x3c\xa8\x78\x0a\x87\x07\x25\x4f\xe1\x14\x41\xcd\x53\x38\x8b\xa0\xe8\x29\x9c\x65\x50\xf5\x38\xe7\x04\xf4\xef\xde\x3a\xfe\xdd\xb3\xfe\x57\xff\x38\x3c\xb3\xb3\xb1\x9e\x31\xe0\x39\x4d\xfd\xf4\x3d\xa6\x2e\xa8\xea\xaf\x31\xf5\x82\xa8\xee\x7f\xc4\xd4\x4b\xaa\xfa\x77\xff\x33\xa6\x2f\x93\x76\x5f\x25\xa9\xd7\xe4\xdc\x63\xea\x4d\x52\xcd\xb6\x44\x75\xb4\x5b\xe6\xd4\xc4\x2f\x01\xa8\xfd\x76\x11\x40\x6d\xb9\xfe\xf1\xe9\x5b\x14\x40\xee\xba\x4b\x00\x6a\xe3\xc5\x8f\x9f\x97\xf9\xb9\x51\xbf\x1e\x16\x68\x97\x41\x39\x6a\xd6\x64\xd4\x6a\xd4\xb0\xc9\xa8\xf5\xa8\x69\x93\x51\x9b\x51\xe3\x26\xa3\xb6\xa3\xe6\x4d\x45\x15\xf3\x51\x03\x27\xa3\xf8\x98\x89\xff\x09\x00\x00\xff\xff\x74\xe4\x49\x29\x2d\x0b\x00\x00")

func _000001_msaot_upSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_msaot_upSql,
		"000001_msaot_up.sql",
	)
}

func _000001_msaot_upSql() (*asset, error) {
	bytes, err := _000001_msaot_upSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_msaot_up.sql", size: 2861, mode: os.FileMode(436), modTime: time.Unix(1603539828, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_msaot_down.sql": _000001_msaot_downSql,
	"000001_msaot_up.sql":   _000001_msaot_upSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_msaot_down.sql": &bintree{_000001_msaot_downSql, map[string]*bintree{}},
	"000001_msaot_up.sql":   &bintree{_000001_msaot_upSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
