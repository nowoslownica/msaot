// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package migrations generated by go-bindata.// sources:
// 000001_msaot.down.sql
// 000001_msaot.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_msaotDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\xc8\x49\xcd\xcd\x4d\x2c\xb6\xe6\x42\x12\x4a\x2f\x4a\xcc\xcd\x4d\x2c\x8a\x2f\xc8\x2f\xce\x2c\xc9\xcc\xcf\x2b\xb6\x06\x04\x00\x00\xff\xff\x7d\x5e\x5e\xcd\x30\x00\x00\x00")

func _000001_msaotDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_msaotDownSql,
		"000001_msaot.down.sql",
	)
}

func _000001_msaotDownSql() (*asset, error) {
	bytes, err := _000001_msaotDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_msaot.down.sql", size: 48, mode: os.FileMode(436), modTime: time.Unix(1603737496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_msaotUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\xbd\x6e\xdb\x30\x10\x80\x77\x3d\xc5\x6d\x8e\x01\x06\x30\xf5\x63\xd9\xc8\xd4\x76\xe8\x56\x64\xe8\x5e\x30\xd2\xc5\x60\x2b\x91\x06\x49\x17\xc9\x5c\x74\xea\xcb\x74\xe9\x50\xa0\xe8\x33\x38\x6f\x54\xc8\x71\x2d\xda\x61\x79\x42\xa5\xc1\x00\x79\xf2\xf7\xe9\xa4\x3b\xf1\x2a\x83\xc2\x21\x38\x71\xd7\x20\x6c\x8c\x68\x5b\x61\x3e\x6c\xb5\x95\x4e\x6a\x65\xe1\x2a\x01\x90\x35\x48\xe5\x60\x6b\x64\x2b\xcc\x23\x7c\xc2\x47\x96\x00\x6c\xde\x08\x8b\xdd\x85\xc3\xe6\x16\x8d\xd5\xea\xb4\x7d\xb7\x6b\xef\xd0\x9c\xb6\xef\x51\x79\xff\x7d\x8b\xaa\xee\x2f\xd6\x58\x35\xa8\xac\xec\xe9\x4a\xab\x8f\xbb\x8d\x70\xc7\x50\x32\xbf\x49\x92\xb3\x34\xef\x1b\x7c\x90\x18\x4b\xee\xb3\x68\x76\x08\x0e\x1f\x1c\x28\xed\x40\xed\x9a\xa6\x0b\x2b\x6d\x5a\xd1\xbc\x8c\x6f\xb5\x7d\x19\xdc\xdc\x1e\xdf\xc2\xe1\x06\x06\xef\xd1\xa0\xaa\xd0\x86\xde\x92\xac\xe7\xa0\x15\xd4\xd8\xa0\x43\x30\x68\x9d\x91\xd5\x73\xe6\xd7\xd7\xfe\x23\xf2\x57\x89\x54\x16\x8d\xeb\xa4\x3a\xa0\x3a\x64\x6e\xaf\x38\x03\xce\x9e\x53\x39\x5b\x1c\xd7\xf3\x9b\x61\x9a\x94\x41\x3a\x81\x26\x63\x90\x4d\xa0\xc9\x19\xe4\x13\x68\x0a\x06\xc5\x04\x9a\x25\x83\xe5\x04\x9a\x92\x41\x39\x81\x66\xe5\xd1\xe9\xff\x6b\xd6\x1e\x3d\x42\xc3\x17\x5e\xc5\xc7\x78\xb8\x57\xf2\x31\x9e\xd4\xab\xf9\x18\x4f\xe6\x15\x7d\x8c\x27\xf7\xaa\x1e\xf6\x9c\x89\xfe\x9e\x58\xfd\xd7\x3d\xdb\xff\xda\x7f\xef\x7e\xb3\x8b\xb5\x9a\x31\xe0\x17\x79\x5c\xe0\xe9\x09\x79\xfa\x16\xc2\xd3\x38\x9e\xf5\xf8\x97\x10\x9e\xc5\xf1\xbc\x47\x7e\x84\xf0\x3c\x8e\x17\x3d\xf2\x7b\xff\x33\x24\x28\xe2\x82\x25\x71\xff\x65\x1c\x2f\x09\xbc\x8c\xe3\x2b\x2f\xfd\x10\xbe\x8a\xe3\x6b\xa2\x74\xeb\x38\xde\x7d\x97\x47\x26\xd8\x37\x0b\x02\xf7\x1b\xef\x1f\x0a\xa2\xf7\x78\x4a\x2b\x88\xfe\xe3\x99\x07\x3d\x7d\x0d\x2a\x88\x1e\xe4\x39\xad\x20\xfa\x90\x17\x44\x29\x78\xd7\x87\x17\xd3\xfb\x75\x17\x18\x76\x42\x14\xe4\x04\x1f\xac\x5a\x92\x53\x7c\xb0\xaa\x24\x27\xf9\x60\xd5\x8a\x9c\xe6\x83\x55\x6b\x72\xa2\x0f\x55\xa5\x0b\x72\xaa\x0f\x56\x71\x6a\xb2\xff\x09\x00\x00\xff\xff\xf3\xb5\xe7\xfa\x3c\x0b\x00\x00")

func _000001_msaotUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_msaotUpSql,
		"000001_msaot.up.sql",
	)
}

func _000001_msaotUpSql() (*asset, error) {
	bytes, err := _000001_msaotUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_msaot.up.sql", size: 2876, mode: os.FileMode(436), modTime: time.Unix(1603740717, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_msaot.down.sql": _000001_msaotDownSql,
	"000001_msaot.up.sql":   _000001_msaotUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_msaot.down.sql": &bintree{_000001_msaotDownSql, map[string]*bintree{}},
	"000001_msaot.up.sql":   &bintree{_000001_msaotUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
