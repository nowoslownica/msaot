// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package migrations generated by go-bindata.// sources:
// 000001_msaot.down.sql
// 000001_msaot.up.sql
// 000002_msaot.down.sql
// 000002_msaot.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_msaotDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\xc8\x49\xcd\xcd\x4d\x2c\xb6\xe6\x42\x12\x4a\x2f\x4a\xcc\xcd\x4d\x2c\x8a\x2f\xc8\x2f\xce\x2c\xc9\xcc\xcf\x43\x95\x4d\xcb\x49\xad\xc8\x4c\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\xf9\x41\x2d\xda\x45\x00\x00\x00")

func _000001_msaotDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_msaotDownSql,
		"000001_msaot.down.sql",
	)
}

func _000001_msaotDownSql() (*asset, error) {
	bytes, err := _000001_msaotDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_msaot.down.sql", size: 69, mode: os.FileMode(436), modTime: time.Unix(1607365221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_msaotUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\xcf\x6e\xdb\x3c\x10\xc4\xef\x7e\x8a\x39\xc6\x00\x89\xcf\xa2\xfc\x57\x39\x7e\x87\xa2\x97\x22\x40\x7b\x2f\x18\x6a\xed\x30\x95\x48\x81\xa4\x8c\xe4\xed\x0b\x2a\x6e\x4c\xc1\x6e\x21\xf1\x62\x1b\x2b\xfc\x46\xb3\x3b\x4b\xc9\xca\x91\x0c\x84\x20\x9f\x1b\xc2\xc9\xc9\xb6\x95\xee\x67\x67\xbd\x0e\xda\x1a\x8f\x87\x05\xa0\x6b\x68\x13\xd0\x39\xdd\x4a\xf7\x8e\x5f\xf4\xce\x16\xc0\xe9\x7f\xe9\x29\x5e\x60\xe0\x1c\x45\x05\x63\x5b\x06\x51\xe1\x44\x86\xa1\xac\x20\x95\x62\x58\x57\xa8\x65\x60\xd8\x54\xd0\xc6\x07\xc7\xb0\xad\xd0\x58\xc5\xb0\xab\x70\x8e\xdf\xfb\x0a\x9d\x74\x81\xe1\x50\xa1\x73\xd4\x45\xe9\x27\x72\xde\x9a\xab\x38\x17\xbc\x8c\xf5\x6f\x7d\xfb\x4c\xee\xb6\xfe\x83\x4c\xea\x85\x8b\x41\xca\x53\x2c\x94\x7c\x1b\xef\xe0\x03\xc3\x8e\xef\x2b\x1c\xfb\xd0\x3b\x8a\xd4\x17\x32\xf5\x87\xda\xa5\x83\xe3\xe0\xbf\x1d\xdc\x9b\xc5\xf2\x71\xb1\x18\x4d\xa7\xa1\xb6\x95\xff\x1a\xc9\x59\x36\x3d\x21\xd0\x5b\x80\xb1\x01\xa6\x6f\x9a\x58\xee\xac\xbf\x2d\xaa\x17\x69\x4e\xf4\x5d\xbd\x50\x2b\x3f\x2d\xf0\x62\x15\xe7\xd8\x1b\x86\xa2\xe0\x62\x55\xe1\x4c\xee\x99\x41\x14\xbc\x5c\xc5\x9e\x6c\xbc\x78\xeb\xec\xd8\xd0\x9b\xa6\x0c\x6b\x43\x4b\x5f\x3f\x08\x47\x47\x72\x64\x14\xf9\xcf\x4e\x75\xbd\x84\x35\xa8\xa9\xa1\x40\x70\xe4\x83\xd3\x2a\x0c\xe9\x3f\x5d\x56\xe4\x16\xbe\xb3\x44\xf7\x75\x86\x3e\xb4\xf1\xe4\x42\xd4\xb0\x77\xc8\xc1\xb6\x7f\x58\xb1\x0f\xc7\x7f\xf9\x8c\x3a\x9c\xa3\x26\xd5\x90\xf1\xda\x9a\x61\x86\xff\xc9\xfa\x95\x54\xd0\x67\x9a\x76\x93\x82\xa1\xf8\xa3\x7a\xfd\xb1\x7c\x9c\x46\x0b\x06\x91\x4f\x97\x0c\x65\x3e\xbd\x66\x58\xe7\xd3\x1b\x86\x4d\x3e\xbd\x65\xd8\xe6\xd3\x3b\x86\x5d\x3e\xbd\x4f\xa0\x72\x36\x7d\x48\x12\x9b\x4f\x17\xab\x84\xca\xc0\x8b\x24\xb3\x0c\x5c\x24\xa1\x65\xe0\x65\x92\x5a\x06\xbe\x4e\x62\x1b\xe1\xf1\x18\x2a\x6b\x5e\xfb\x93\x8c\xc4\xf0\xf8\x8a\xb5\xcb\xd3\x78\xa2\x7c\xba\x8e\xd7\x53\x39\xd9\xdd\x67\x67\x22\x0b\x4f\x3b\xcb\xc0\xf7\x89\xf9\x72\x3e\x7e\x48\xcc\xcf\xc7\xc5\x2a\x31\x3f\xc2\x39\x87\xb4\x4e\xfb\x89\x19\x88\x62\x9c\x41\x39\xd3\x87\x18\x67\x30\x17\x2f\xc7\x19\xcc\xc5\xd7\xe3\x0c\xe6\xe2\x9b\x71\x06\x73\xf1\xed\x38\x83\x2b\x3e\x1c\x8f\xf8\x67\x47\x2b\xdd\x35\x13\x5f\x4b\x62\x37\x7e\xe1\x5d\xd6\x6a\xb2\x9b\xfd\x3d\x5c\x4c\xc6\x0f\xf7\xf0\x72\xf9\xb8\xf8\x1d\x00\x00\xff\xff\x0a\x4e\xa3\xf2\x39\x0a\x00\x00")

func _000001_msaotUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_msaotUpSql,
		"000001_msaot.up.sql",
	)
}

func _000001_msaotUpSql() (*asset, error) {
	bytes, err := _000001_msaotUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_msaot.up.sql", size: 2617, mode: os.FileMode(436), modTime: time.Unix(1607344758, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_msaotDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x29\x2a\xcd\x4b\x4e\x2c\x49\x55\x28\x49\x4c\xca\x49\x55\x48\xcb\x49\xad\xc8\x4c\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\x2e\xe6\x40\xcc\x18\x00\x00\x00")

func _000002_msaotDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_msaotDownSql,
		"000002_msaot.down.sql",
	)
}

func _000002_msaotDownSql() (*asset, error) {
	bytes, err := _000002_msaotDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_msaot.down.sql", size: 24, mode: os.FileMode(436), modTime: time.Unix(1607342344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_msaotUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd4\xdb\x6a\xf2\x40\x10\x07\xf0\x7b\x9f\x62\xef\xf6\x13\xf6\x22\xb3\x39\x8a\x4f\x23\x7c\x29\x58\x62\x14\x4f\xf4\xd2\x03\x85\x82\x05\xe9\x9b\xd8\x56\xc1\x56\x49\x5f\x61\xe6\x8d\xca\x26\x9a\xc4\x4d\xdd\xbd\xc8\xdd\xfc\xd8\xcd\xfc\x77\xa6\x9f\x4e\xe2\xf1\x94\xf5\xd3\xe9\x90\x25\xf1\x60\xd0\x9b\xb0\x79\x2f\x99\xc5\x93\x7f\x20\x18\xc7\x33\xee\xd4\xc7\x05\xe3\x29\x17\x0c\xda\xdd\xd6\x7d\x21\x05\xe3\xb4\x55\xb5\xa3\xf1\x50\x95\x4b\x73\xbd\xab\x4e\x38\xe2\x9e\x56\x78\x54\x6a\xae\x4e\x30\x13\x4f\x91\x4f\x5a\xe3\x89\xb6\xb4\xa2\xd7\x92\x49\x23\xf3\x15\xfb\xc1\xac\xb8\x5b\x3c\xe2\x82\xa5\xb3\x24\x31\x9a\x40\x99\x6f\x5a\xe0\x8e\x96\x78\xc4\x0f\xda\xe0\x97\xf2\xbd\xff\x8f\x5c\x30\xdf\x68\xc3\xfc\x9a\x98\xd1\x02\x33\xdc\x5f\xbb\x67\x36\x91\x32\xef\xb4\xa9\xff\x96\x74\xda\xdd\xd6\x8d\x79\x48\xe2\xa7\x7e\x7c\x2f\x24\x68\x46\xa4\x01\x59\x02\xda\x14\x40\xef\x9c\x06\xdc\x0a\xac\x0b\xe0\x9a\x81\x57\x5d\xe9\x50\x00\xcf\x0c\xfc\x0a\x64\x79\x8b\xa1\xd9\x2a\x8d\x04\x8d\x33\x02\x33\x08\x6b\x67\x14\x20\x34\x83\xa8\xd1\xa7\xc8\x0c\x3a\x25\x28\xca\x3b\xe6\x72\x70\xb4\x7a\x70\x2c\xa0\x1e\x75\x89\x2c\x69\x83\xbc\x41\xf9\x98\xc1\x1f\xd3\xa2\x33\xb7\xc6\xe8\xf9\x82\x2c\xb9\x83\xd7\x68\x19\x78\xb6\xe7\xeb\x5f\x57\x86\xb4\xbe\x5c\xc8\x43\x3f\xd0\x12\xcf\xf9\x80\x44\x82\x81\xe5\x99\x40\x78\x99\x7b\x7a\xa1\x37\x3c\x71\xc1\x5c\xc1\xa4\x25\x79\x88\x9a\x3b\xc6\x13\xcc\x16\x4f\xa7\x5a\x31\xbe\xb5\x5a\x3a\xda\x72\xc1\xec\x32\x5f\x81\x75\x5c\x24\xdc\x2c\x97\x5c\x85\x85\xfa\x0d\x00\x00\xff\xff\x50\x7c\x99\x15\xcd\x05\x00\x00")

func _000002_msaotUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_msaotUpSql,
		"000002_msaot.up.sql",
	)
}

func _000002_msaotUpSql() (*asset, error) {
	bytes, err := _000002_msaotUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_msaot.up.sql", size: 1485, mode: os.FileMode(436), modTime: time.Unix(1607344185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_msaot.down.sql": _000001_msaotDownSql,
	"000001_msaot.up.sql":   _000001_msaotUpSql,
	"000002_msaot.down.sql": _000002_msaotDownSql,
	"000002_msaot.up.sql":   _000002_msaotUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_msaot.down.sql": &bintree{_000001_msaotDownSql, map[string]*bintree{}},
	"000001_msaot.up.sql":   &bintree{_000001_msaotUpSql, map[string]*bintree{}},
	"000002_msaot.down.sql": &bintree{_000002_msaotDownSql, map[string]*bintree{}},
	"000002_msaot.up.sql":   &bintree{_000002_msaotUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
