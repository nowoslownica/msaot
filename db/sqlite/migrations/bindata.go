// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package migrations generated by go-bindata.// sources:
// 000001_msaot.down.sql
// 000001_msaot.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_msaotDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\xc8\x49\xcd\xcd\x4d\x2c\xb6\xe6\x42\x12\x4a\x2f\x4a\xcc\xcd\x4d\x2c\x8a\x2f\xc8\x2f\xce\x2c\xc9\xcc\xcf\x2b\xb6\x06\x04\x00\x00\xff\xff\x7d\x5e\x5e\xcd\x30\x00\x00\x00")

func _000001_msaotDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_msaotDownSql,
		"000001_msaot.down.sql",
	)
}

func _000001_msaotDownSql() (*asset, error) {
	bytes, err := _000001_msaotDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_msaot.down.sql", size: 48, mode: os.FileMode(436), modTime: time.Unix(1604935548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_msaotUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\xcd\x8e\xd3\x30\x10\x80\xef\x79\x8a\xb9\x75\x2b\x79\xa5\x3a\xbf\xad\xf6\x04\x1c\xb8\xa1\x3d\x70\x47\xde\x64\xb6\x32\x24\x76\x65\xbb\x68\xf7\x8c\x38\xf1\x32\x5c\x90\x40\x42\x3c\x43\xf7\x8d\x50\xba\xa5\x71\x5b\x63\x5b\x9b\x1c\x2a\xc5\x93\x7e\x9f\xa7\x9e\x71\xa7\x56\xc8\x0c\x82\x61\x77\x2d\xc2\x5a\xb1\xae\x63\xea\xc3\x46\x6a\x6e\xb8\x14\x1a\xae\x12\x00\xde\x00\x17\x06\x36\x8a\x77\x4c\x3d\xc2\x27\x7c\x24\x09\xc0\xfa\x0d\xd3\xd8\xbf\xd8\x2f\x6e\x51\x69\x29\x8e\xcb\x77\xdb\xee\x0e\xd5\x71\xf9\x1e\x85\xf5\xdd\xb7\x28\x9a\xe1\x65\x83\x75\x8b\x42\xf3\x81\xae\xa5\xf8\xb8\x5d\x33\x73\x08\x25\xf3\x9b\x24\x39\x49\xf3\xbe\xc5\x07\x8e\xbe\xe4\x3e\xb3\x76\x8b\x60\xf0\xc1\x80\x90\x06\xc4\xb6\x6d\xfb\xb0\x90\xaa\x63\xed\x65\x7c\x23\xf5\x65\x70\x7d\x7b\x38\x85\xfd\x06\x0a\xef\x51\xa1\xa8\x51\xbb\x4e\x89\x37\x73\x90\x02\x1a\x6c\xd1\x20\x28\xd4\x46\xf1\xfa\x39\xf3\xeb\x6b\xfb\x27\xd2\x57\x09\x17\x1a\x95\xe9\xa5\xd2\xa1\xda\x67\xae\xaf\x28\x01\x4a\x9e\x53\x39\x79\x38\x3c\xcf\x6f\xe2\x34\x29\x81\x74\x02\x4d\x46\x20\x9b\x40\x93\x13\xc8\x27\xd0\x14\x04\x8a\x09\x34\x25\x81\x72\x02\x4d\x45\xa0\x9a\x40\xb3\xb4\xe8\xf4\xe5\x9a\x95\x45\x8f\xd0\xd0\x85\x55\xf1\x31\x1e\x6a\x95\x7c\x8c\x27\xb5\x6a\x3e\xc6\x93\x59\x45\x1f\xe3\xc9\xad\xaa\xbb\x3d\x27\xa2\x7f\xff\x58\xc3\xed\x9e\xed\x7e\xef\xbe\xf7\x9f\xd9\xd9\xb3\x98\x11\xa0\x67\x79\x9c\xe1\xe9\x11\x79\xfa\xe6\xc2\x53\x3f\x9e\x0d\xf8\x17\x17\x9e\xf9\xf1\x7c\x40\x7e\xb8\xf0\xdc\x8f\x17\x03\xf2\x67\xf7\xcb\x25\x28\xfc\x82\x32\xb0\x7f\xe9\xc7\x2b\x6b\x7f\x17\x5e\xf9\xf1\x65\xe0\xec\x97\x7e\x7c\x75\x44\x5c\xf0\xca\x0f\xf7\xb7\xd2\x43\xd3\x45\x00\xb7\xdb\xee\x3f\x8a\x40\xe7\xd1\xf4\x44\xb1\xfb\xe9\x94\x04\xfa\x8f\x66\x16\xf4\xf4\xd5\xa9\x08\xf4\x20\xcd\x03\x65\xa0\x7d\x17\x9e\x8d\xde\xd7\x7d\x20\xee\x7a\x17\xc1\xf1\x1b\xad\x2a\x83\x23\x38\x5a\x55\x05\xc7\x70\xb4\x6a\x19\x1c\xc5\xd1\xaa\x55\x70\x1c\xc7\xaa\xd2\x45\x70\x24\x47\xab\x68\x68\x2c\xff\x0d\x00\x00\xff\xff\x91\x3a\x00\xdc\xf9\x0a\x00\x00")

func _000001_msaotUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_msaotUpSql,
		"000001_msaot.up.sql",
	)
}

func _000001_msaotUpSql() (*asset, error) {
	bytes, err := _000001_msaotUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_msaot.up.sql", size: 2809, mode: os.FileMode(436), modTime: time.Unix(1606909144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_msaot.down.sql": _000001_msaotDownSql,
	"000001_msaot.up.sql":   _000001_msaotUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_msaot.down.sql": &bintree{_000001_msaotDownSql, map[string]*bintree{}},
	"000001_msaot.up.sql":   &bintree{_000001_msaotUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
