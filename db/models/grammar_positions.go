// Code generated by SQLBoiler 4.1.2 (https://gitlab.etecs.ru/forks/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/strmangle"
	"gitlab.etecs.ru/forks/sqlboiler/v4/boil"
	"gitlab.etecs.ru/forks/sqlboiler/v4/pagination"
	"gitlab.etecs.ru/forks/sqlboiler/v4/queries"
	"gitlab.etecs.ru/forks/sqlboiler/v4/queries/qm"
	"gitlab.etecs.ru/forks/sqlboiler/v4/queries/qmhelper"
)

// GrammarPosition is an object representing the database table.
type GrammarPosition struct {
	ID          null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	GCase       null.Int64 `boil:"gCase" json:"gCase,omitempty" toml:"gCase" yaml:"gCase,omitempty"`
	GPerson     null.Int64 `boil:"gPerson" json:"gPerson,omitempty" toml:"gPerson" yaml:"gPerson,omitempty"`
	GNumber     null.Int64 `boil:"gNumber" json:"gNumber,omitempty" toml:"gNumber" yaml:"gNumber,omitempty"`
	GTense      null.Int64 `boil:"gTense" json:"gTense,omitempty" toml:"gTense" yaml:"gTense,omitempty"`
	GGender     null.Int64 `boil:"gGender" json:"gGender,omitempty" toml:"gGender" yaml:"gGender,omitempty"`
	Declension  null.Int64 `boil:"declension" json:"declension,omitempty" toml:"declension" yaml:"declension,omitempty"`
	Conjugation null.Int64 `boil:"conjugation" json:"conjugation,omitempty" toml:"conjugation" yaml:"conjugation,omitempty"`

	R *grammarPositionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L grammarPositionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GrammarPositionColumns = struct {
	ID          string
	GCase       string
	GPerson     string
	GNumber     string
	GTense      string
	GGender     string
	Declension  string
	Conjugation string
}{
	ID:          "id",
	GCase:       "gCase",
	GPerson:     "gPerson",
	GNumber:     "gNumber",
	GTense:      "gTense",
	GGender:     "gGender",
	Declension:  "declension",
	Conjugation: "conjugation",
}

// Generated where

var GrammarPositionWhere = struct {
	ID          whereHelpernull_Int64
	GCase       whereHelpernull_Int64
	GPerson     whereHelpernull_Int64
	GNumber     whereHelpernull_Int64
	GTense      whereHelpernull_Int64
	GGender     whereHelpernull_Int64
	Declension  whereHelpernull_Int64
	Conjugation whereHelpernull_Int64
}{
	ID:          whereHelpernull_Int64{field: "\"grammar_positions\".\"id\""},
	GCase:       whereHelpernull_Int64{field: "\"grammar_positions\".\"gCase\""},
	GPerson:     whereHelpernull_Int64{field: "\"grammar_positions\".\"gPerson\""},
	GNumber:     whereHelpernull_Int64{field: "\"grammar_positions\".\"gNumber\""},
	GTense:      whereHelpernull_Int64{field: "\"grammar_positions\".\"gTense\""},
	GGender:     whereHelpernull_Int64{field: "\"grammar_positions\".\"gGender\""},
	Declension:  whereHelpernull_Int64{field: "\"grammar_positions\".\"declension\""},
	Conjugation: whereHelpernull_Int64{field: "\"grammar_positions\".\"conjugation\""},
}

// GrammarPositionRels is where relationship names are stored.
var GrammarPositionRels = struct {
	GPositionFlexies string
}{
	GPositionFlexies: "GPositionFlexies",
}

// grammarPositionR is where relationships are stored.
type grammarPositionR struct {
	GPositionFlexies FlexySlice `boil:"GPositionFlexies" json:"GPositionFlexies" toml:"GPositionFlexies" yaml:"GPositionFlexies"`
}

// NewStruct creates a new relationship struct
func (*grammarPositionR) NewStruct() *grammarPositionR {
	return &grammarPositionR{}
}

// grammarPositionL is where Load methods for each relationship are stored.
type grammarPositionL struct{}

var (
	grammarPositionAllColumns            = []string{"id", "gCase", "gPerson", "gNumber", "gTense", "gGender", "declension", "conjugation"}
	grammarPositionColumnsWithoutDefault = []string{"id", "gCase", "gPerson", "gNumber", "gTense", "gGender", "declension", "conjugation"}
	grammarPositionColumnsWithDefault    = []string{}
	grammarPositionPrimaryKeyColumns     = []string{"id"}
)

type (
	// GrammarPositionSlice is an alias for a slice of pointers to GrammarPosition.
	// This should generally be used opposed to []GrammarPosition.
	GrammarPositionSlice []*GrammarPosition

	grammarPositionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	grammarPositionType                 = reflect.TypeOf(&GrammarPosition{})
	grammarPositionMapping              = queries.MakeStructMapping(grammarPositionType)
	grammarPositionPrimaryKeyMapping, _ = queries.BindMapping(grammarPositionType, grammarPositionMapping, grammarPositionPrimaryKeyColumns)
	grammarPositionInsertCacheMut       sync.RWMutex
	grammarPositionInsertCache          = make(map[string]insertCache)
	grammarPositionUpdateCacheMut       sync.RWMutex
	grammarPositionUpdateCache          = make(map[string]updateCache)
	grammarPositionUpsertCacheMut       sync.RWMutex
	grammarPositionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single grammarPosition record from the query.
func (q grammarPositionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GrammarPosition, error) {
	o := &GrammarPosition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for grammar_positions")
	}

	return o, nil
}

// All returns all GrammarPosition records from the query.
func (q grammarPositionQuery) All(ctx context.Context, exec boil.ContextExecutor) (GrammarPositionSlice, error) {
	var o []*GrammarPosition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GrammarPosition slice")
	}

	return o, nil
}

// Count returns the count of all GrammarPosition records in the query.
func (q grammarPositionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count grammar_positions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q grammarPositionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if grammar_positions exists")
	}

	return count > 0, nil
}

// GPositionFlexies retrieves all the flexy's Flexies with an executor via gPosition column.
func (o *GrammarPosition) GPositionFlexies(mods ...qm.QueryMod) flexyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"flexies\".\"gPosition\"=?", o.ID),
	)

	query := Flexies(queryMods...)
	queries.SetFrom(query.Query, "\"flexies\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"flexies\".*"})
	}

	return query
}

// LoadGPositionFlexies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (grammarPositionL) LoadGPositionFlexies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGrammarPosition interface{}, mods queries.Applicator) error {
	var slice []*GrammarPosition
	var object *GrammarPosition

	if singular {
		object = maybeGrammarPosition.(*GrammarPosition)
	} else {
		slice = *maybeGrammarPosition.(*[]*GrammarPosition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &grammarPositionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &grammarPositionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`flexies`),
		qm.WhereIn(`flexies.gPosition in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load flexies")
	}

	var resultSlice []*Flexy
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice flexies")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on flexies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for flexies")
	}

	if singular {
		object.R.GPositionFlexies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &flexyR{}
			}
			foreign.R.GPosition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.GPosition) {
				local.R.GPositionFlexies = append(local.R.GPositionFlexies, foreign)
				if foreign.R == nil {
					foreign.R = &flexyR{}
				}
				foreign.R.GPosition = local
				break
			}
		}
	}

	return nil
}

// AddGPositionFlexies adds the given related objects to the existing relationships
// of the grammar_position, optionally inserting them as new records.
// Appends related to o.R.GPositionFlexies.
// Sets related.R.GPosition appropriately.
func (o *GrammarPosition) AddGPositionFlexies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Flexy) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GPosition, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"flexies\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"gPosition"}),
				strmangle.WhereClause("\"", "\"", 0, flexyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GPosition, o.ID)
		}
	}

	if o.R == nil {
		o.R = &grammarPositionR{
			GPositionFlexies: related,
		}
	} else {
		o.R.GPositionFlexies = append(o.R.GPositionFlexies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &flexyR{
				GPosition: o,
			}
		} else {
			rel.R.GPosition = o
		}
	}
	return nil
}

// SetGPositionFlexies removes all previously related items of the
// grammar_position replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.GPosition's GPositionFlexies accordingly.
// Replaces o.R.GPositionFlexies with related.
// Sets related.R.GPosition's GPositionFlexies accordingly.
func (o *GrammarPosition) SetGPositionFlexies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Flexy) error {
	query := "update \"flexies\" set \"gPosition\" = null where \"gPosition\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GPositionFlexies {
			queries.SetScanner(&rel.GPosition, nil)
			if rel.R == nil {
				continue
			}

			rel.R.GPosition = nil
		}

		o.R.GPositionFlexies = nil
	}
	return o.AddGPositionFlexies(ctx, exec, insert, related...)
}

// RemoveGPositionFlexies relationships from objects passed in.
// Removes related items from R.GPositionFlexies (uses pointer comparison, removal does not keep order)
// Sets related.R.GPosition.
func (o *GrammarPosition) RemoveGPositionFlexies(ctx context.Context, exec boil.ContextExecutor, related ...*Flexy) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GPosition, nil)
		if rel.R != nil {
			rel.R.GPosition = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("gPosition")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GPositionFlexies {
			if rel != ri {
				continue
			}

			ln := len(o.R.GPositionFlexies)
			if ln > 1 && i < ln-1 {
				o.R.GPositionFlexies[i] = o.R.GPositionFlexies[ln-1]
			}
			o.R.GPositionFlexies = o.R.GPositionFlexies[:ln-1]
			break
		}
	}

	return nil
}

// GrammarPositions retrieves all the records using an executor.
func GrammarPositions(mods ...qm.QueryMod) grammarPositionQuery {
	mods = append(mods, qm.From("\"grammar_positions\""))
	return grammarPositionQuery{NewQuery(mods...)}
}

// FindGrammarPosition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGrammarPosition(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*GrammarPosition, error) {
	grammarPositionObj := &GrammarPosition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"grammar_positions\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, grammarPositionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from grammar_positions")
	}

	return grammarPositionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GrammarPosition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no grammar_positions provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(grammarPositionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	grammarPositionInsertCacheMut.RLock()
	cache, cached := grammarPositionInsertCache[key]
	grammarPositionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			grammarPositionAllColumns,
			grammarPositionColumnsWithDefault,
			grammarPositionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(grammarPositionType, grammarPositionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(grammarPositionType, grammarPositionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"grammar_positions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"grammar_positions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"grammar_positions\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, grammarPositionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into grammar_positions")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for grammar_positions")
	}

CacheNoHooks:
	if !cached {
		grammarPositionInsertCacheMut.Lock()
		grammarPositionInsertCache[key] = cache
		grammarPositionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the GrammarPosition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GrammarPosition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	grammarPositionUpdateCacheMut.RLock()
	cache, cached := grammarPositionUpdateCache[key]
	grammarPositionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			grammarPositionAllColumns,
			grammarPositionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update grammar_positions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"grammar_positions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, grammarPositionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(grammarPositionType, grammarPositionMapping, append(wl, grammarPositionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update grammar_positions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for grammar_positions")
	}

	if !cached {
		grammarPositionUpdateCacheMut.Lock()
		grammarPositionUpdateCache[key] = cache
		grammarPositionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q grammarPositionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for grammar_positions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for grammar_positions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GrammarPositionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), grammarPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"grammar_positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, grammarPositionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in grammarPosition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all grammarPosition")
	}
	return rowsAff, nil
}

// Delete deletes a single GrammarPosition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GrammarPosition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GrammarPosition provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), grammarPositionPrimaryKeyMapping)
	sql := "DELETE FROM \"grammar_positions\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from grammar_positions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for grammar_positions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q grammarPositionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no grammarPositionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from grammar_positions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for grammar_positions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GrammarPositionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), grammarPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"grammar_positions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, grammarPositionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from grammarPosition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for grammar_positions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GrammarPosition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGrammarPosition(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GrammarPositionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GrammarPositionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), grammarPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"grammar_positions\".* FROM \"grammar_positions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, grammarPositionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GrammarPositionSlice")
	}

	*o = slice

	return nil
}

// GrammarPositionExists checks if the GrammarPosition row exists.
func GrammarPositionExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"grammar_positions\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if grammar_positions exists")
	}

	return exists, nil
}

// GrammarPositionItemsPaginated
// It always adds sorting by id in the end
func GrammarPositionItemsPaginated(
	ctx context.Context,
	exec boil.ContextExecutor,
	params *pagination.Params,
	where []qm.QueryMod,
	orderBy []qm.QueryMod,
) ([]*GrammarPosition, int64, error) {
	limitQuery := append(where, qm.Limit(params.Limit), qm.Offset((params.Page-1)*params.Limit))
	limitQuery = append(limitQuery, orderBy...)
	limitQuery = append(limitQuery, qm.OrderBy("\"grammar_positions\".id"))
	items, err := GrammarPositions(limitQuery...).All(ctx, exec)
	if err != nil {
		return nil, 0, err
	}
	count, err := GrammarPositions(where...).Count(ctx, exec)
	if err != nil {
		return nil, 0, err
	}
	return items, count, nil
}

var GrammarPositionColumnExists = map[string]struct{}{
	"id":          {},
	"gCase":       {},
	"gPerson":     {},
	"gNumber":     {},
	"gTense":      {},
	"gGender":     {},
	"declension":  {},
	"conjugation": {},
}

var GrammarPositionFieldToColumn = map[string]string{
	"ID":          "grammar_positions.id",
	"GCase":       "grammar_positions.gCase",
	"GPerson":     "grammar_positions.gPerson",
	"GNumber":     "grammar_positions.gNumber",
	"GTense":      "grammar_positions.gTense",
	"GGender":     "grammar_positions.gGender",
	"Declension":  "grammar_positions.declension",
	"Conjugation": "grammar_positions.conjugation",
}

/*
Column: id
        Type: null.Int64
        DBType: INT
        DomainName: <nil>
        FullDBType: INT
Column: gCase
        Type: null.Int64
        DBType: INT
        DomainName: <nil>
        FullDBType: INT
Column: gPerson
        Type: null.Int64
        DBType: INT
        DomainName: <nil>
        FullDBType: INT
Column: gNumber
        Type: null.Int64
        DBType: INT
        DomainName: <nil>
        FullDBType: INT
Column: gTense
        Type: null.Int64
        DBType: INT
        DomainName: <nil>
        FullDBType: INT
Column: gGender
        Type: null.Int64
        DBType: INT
        DomainName: <nil>
        FullDBType: INT
Column: declension
        Type: null.Int64
        DBType: INT
        DomainName: <nil>
        FullDBType: INT
Column: conjugation
        Type: null.Int64
        DBType: INT
        DomainName: <nil>
        FullDBType: INT
*/
